&Пластилин Перем КомпиляторИсходников;
&Пластилин Перем УведомленияПользователям;
&Пластилин Перем ЗапускательКонфигуратора;
&Пластилин Перем ОчередьЗаданийПользователя;
&Пластилин Перем АнализаторКода;


&Контроллер("/cmd")
Процедура ПриСозданииОбъекта()
КонецПроцедуры

&ТочкаМаршрута("runDesigner")
Процедура ЗапускКонфигуратора() Экспорт

	ОчередьЗаданийПользователя.Добавить("Запуск конфигуратора", 
		Новый Действие(ЭтотОбъект, "ЗапуститьКонфигураторВспомогательный")
	);

КонецПроцедуры

&ТочкаМаршрута("DecompileToFile/{Цель}")
Процедура РазобратьВИсходники(Цель) Экспорт

	Если Цель = "-conf" Тогда

		ОчередьЗаданийПользователя.Добавить("Разбор конфигурации", 
			Новый Действие(ЭтотОбъект, "РазобратьКонфигурациюВспомогательный")
		);

	Иначе

		ОчередьЗаданийПользователя.Добавить("Разбор расширения: " + Цель, 
			Новый Действие(ЭтотОбъект, "РазобратьРасширениеВспомогательный"),
			Цель
		);

	КонецЕсли;

КонецПроцедуры

&ТочкаМаршрута("CompileFromFile/{Цель}")
Процедура СобратьИзИсходников(Цель) Экспорт

	Если Цель = "-conf" Тогда

		ОчередьЗаданийПользователя.Добавить("Сборка конфигурации", 
			Новый Действие(ЭтотОбъект, "СобратьКонфигурациюВспомогательный")
		);

	Иначе

		ОчередьЗаданийПользователя.Добавить("Сборка расширения: " + Цель, 
			Новый Действие(ЭтотОбъект, "СобратьРасширениеВспомогательный"), 
			Цель
		);

	КонецЕсли;

КонецПроцедуры

&ТочкаМаршрута("Analize/{Цель}")
Процедура АнализИсходниковКонфигурацииИРасширения(Цель) Экспорт

	Если Цель = "-conf" Тогда

		ОчередьЗаданийПользователя.Добавить("Анализ конфигурации", 
			Новый Действие(ЭтотОбъект, "АнализироватьКонфигурацию")
		);

	Иначе

		ОчередьЗаданийПользователя.Добавить("Анализ расширения: " + Цель, 
			Новый Действие(ЭтотОбъект, "АнилизироватьРасширение"), 
			Цель
		);

	КонецЕсли;

КонецПроцедуры

#Область Вспомогательные

Процедура АнализироватьКонфигурацию() Экспорт
	Результат = АнализаторКода.АнализКонфигурации();
	УведомленияПользователям.СобытиеЛога(Результат);
КонецПроцедуры

Процедура АнилизироватьРасширение(ИмяРасширения) Экспорт
	Результат = АнализаторКода.АналиРасширения(ИмяРасширения);
	УведомленияПользователям.СобытиеЛога(Результат);
КонецПроцедуры

Процедура СобратьКонфигурациюВспомогательный() Экспорт
	РезультатРазбора = КомпиляторИсходников.СобратьКонфигурацию();
	УведомленияПользователям.СобытиеЛога(РезультатРазбора);
КонецПроцедуры

Процедура РазобратьКонфигурациюВспомогательный() Экспорт
	РезультатРазбора = КомпиляторИсходников.РазобратьКонфигурацию();
	УведомленияПользователям.СобытиеЛога(РезультатРазбора);
КонецПроцедуры

Процедура СобратьРасширениеВспомогательный(ИмяРасширения) Экспорт
	РезультатРазбора = КомпиляторИсходников.СобратьРасширение(ИмяРасширения);
	УведомленияПользователям.СобытиеЛога(РезультатРазбора);
КонецПроцедуры

Процедура РазобратьРасширениеВспомогательный(ИмяРасширения) Экспорт
	РезультатРазбора = КомпиляторИсходников.РазобратьРасширение(ИмяРасширения);
	УведомленияПользователям.СобытиеЛога(РезультатРазбора);
КонецПроцедуры

Процедура ЗапуститьКонфигураторВспомогательный() Экспорт
	РезультатЗапуска = ЗапускательКонфигуратора.ЗапуститьКонфигуратор();
	УведомленияПользователям.СобытиеЛога(РезультатЗапуска);
КонецПроцедуры

#КонецОбласти