#Использовать fs

#Область ИнтеграцияВСписок

Перем Ссылка Экспорт;
Перем Представление Экспорт;

#КонецОбласти

Перем КаталогИсходников;
Перем КаталогОбработок;
Перем Обработки;
Перем ФабрикаКоманд;
Перем КаталогСборки;


&Желудь
&Порядок(10)
&Прозвище("АдаптерТестов")
Процедура ПриСозданииОбъекта(&Пластилин НастройкиПроекта, 
							&Пластилин МенеджерОбработок,
							&Табакерка &Пластилин КомандаВраннер)

	Ссылка = "/vanessaadd";
	Представление = "Vanessa ADD";
	Настройки = НастройкиПроекта.ПолучитьЗначение("ВанессаАДД");
	КаталогСборки = НастройкиПроекта.КаталогСборки();

	Если НЕ Настройки = Неопределено Тогда
		КаталогИсходников = Настройки["КаталогИсходников"];
		КаталогОбработок = Настройки["КаталогОбработок"];
	КонецЕсли;

	Обработки = МенеджерОбработок;
	Обработки.КаталогИсходников = КаталогИсходников;
	Обработки.КаталогБинарников = КаталогОбработок;

	ФабрикаКоманд = КомандаВраннер;

КонецПроцедуры

Функция ВыполнитьТесты() Экспорт
	Возврат КомандаЗапускаТестов(КаталогОбработок).Исполнить();
КонецФункции

Функция ВыполнитьТест(ИмяОбработки) Экспорт
	Тест = Обработки.СтрокаПоИмени(ИмяОбработки);

	Если Тест.ПутьБинарника = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Для %1 нет бинарника", ИмяОбработки);
	КонецЕсли;

	Возврат КомандаЗапускаТестов(Тест.ПутьБинарника).Исполнить();

КонецФункции

Функция ТаблицаОбработок() Экспорт
	Возврат Обработки.ТаблицаОбработок();
КонецФункции

Функция СобратьВсе() Экспорт

	Возврат Обработки.СобратьВсе();

КонецФункции

Функция РазобратьВсе() Экспорт

	Возврат Обработки.РазобратьВсе();

КонецФункции

Функция Собрать(ИмяОбработки) Экспорт

	Возврат Обработки.Собрать(ИмяОбработки);

КонецФункции

Функция Разобрать(ИмяОбработки) Экспорт

	Возврат Обработки.Разобрать(ИмяОбработки);
	
КонецФункции

Функция КомандаЗапускаТестов(Каталог)

	КаталогОтчета =  КаталогОтчета();

	ФС.ОбеспечитьКаталог(КаталогОтчета);

	// TODO : См. ниже, кажется не кроссплатформено
	// ПараметрыХЮнит = ПараметрыХЮнит(КаталогОтчета);
	// ФайлПараметрыХЮнит = ОбъединитьПути(КаталогОтчета, "xUnitParams.json");
	// ЗаписатьДополнительныеДанные(ФайлПараметрыХЮнит, ПараметрыХЮнит);

	Команда = ФабрикаКоманд.Достать();

	Команда.ДобавитьПараметр("xunit");
	Команда.ДобавитьПараметр(Каталог);
	Команда.ДобавитьПараметр("--xdddebug");
	Команда.ДобавитьПараметр(СтрШаблон("--reportsxunit ""ГенераторОтчетаJUnitXML{%1/junit.xml}""", КаталогОтчета));
	Команда.ДобавитьПараметр(СтрШаблон("--xddExitCodePath ""%1/xddExitCodePath.txt""", КаталогОтчета));
	Команда.ДобавитьПараметр("--testclient-additional ""/iTaxi""");
	
	// TODO : Кажется не кроссплатформенно
	// Команда.ДобавитьПараметр(СтрШаблон("--xddConfig ""%1""", ФайлПараметрыХЮнит));

	Возврат Команда;

КонецФункции

Процедура ЗаписатьДополнительныеДанные(ИмяФайла , Данные)
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(ИмяФайла);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ЗаписьJSON.Закрыть();
КонецПроцедуры

Функция ПараметрыХЮнит(КаталогОтчета) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("Отладка", Ложь);
	Структура.Вставить("ВыводитьПодробноеПредставлениеОшибки", Истина);
	Структура.Вставить("ДобавлятьИмяПользователяВПредставлениеТеста", Ложь);
	Структура.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Истина);
	Структура.Вставить("ИмяФайлаЛогВыполненияСценариев", ОбъединитьПути(КаталогОтчета, "log.txt"));

	Возврат Структура;
КонецФункции

Функция КаталогТекущегоОтчета(Дата, Идентификатор)
	Возврат Формат(Дата, "ДФ=yyyy-MM-dd-HH-mm-ss") + "-" + Идентификатор;
КонецФункции

Функция КаталогОтчета()

	Возврат ОбъединитьПути(КаталогСборки, 
							"vanessaadd_xunit",
							КаталогТекущегоОтчета(ТекущаяДата(), Строка(Новый УникальныйИдентификатор)));
	
КонецФункции

